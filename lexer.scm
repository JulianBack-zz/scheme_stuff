;;; Lexer generated by gpt4o.  After adding char-in? to fix compile
;;; error (chicken scheme char<=? ony takes two parameters) it doesn't
;;; work.
;;; Basically the AI code is useless.

(define (char-in? a b c)
  (and (char>=? b a) (char<=? b c)))

(define (is-letter? c)
  (or (char-in? #\a c #\z) (char-in? #\A c #\Z)))

(define (is-digit? c)
  (char-in? #\0 c #\9))

(define (is-whitespace? c)
  (or (char=? c #\space) (char=? c #\tab) (char=? c #\newline)))

(define (tokenize input)
  (let loop ((input input) (tokens '()))
    (cond
      ((null? input) (reverse tokens))
      ((is-whitespace? (car input))
       (loop (cdr input) tokens))
      ((is-letter? (car input))
       (let ((identifier (read-identifier input)))
         (loop (cdr identifier) (cons (list 'IDENTIFIER (car identifier)) tokens))))
      ((is-digit? (car input))
       (let ((number (read-number input)))
         (loop (cdr number) (cons (list 'NUMBER (car number)) tokens))))
      ((char=? (car input) #\;)
       (loop (cdr input) (cons '(SEMICOLON ";") tokens)))
      (else
       (error "Unknown character" (car input))))))

(define (read-identifier input)
  (let loop ((input input) (identifier '()))
    (if (or (null? input) (not (is-letter? (car input))))
        (reverse identifier)
        (loop (cdr input) (cons (car input) identifier)))))

(define (read-number input)
  (let loop ((input input) (number '()))
    (if (or (null? input) (not (is-digit? (car input))))
        (reverse number)
        (loop (cdr input) (cons (car input) number)))))

;; Example usage:
(define input (string->list "var x := 42;"))
(define tokens (tokenize input))
(display tokens)
